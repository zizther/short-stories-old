/*!
 * JavaScript Cookie v2.2.0
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
;(function (factory) {
	var registeredInModuleLoader;
	if (typeof define === 'function' && define.amd) {
		define(factory);
		registeredInModuleLoader = true;
	}
	if (typeof exports === 'object') {
		module.exports = factory();
		registeredInModuleLoader = true;
	}
	if (!registeredInModuleLoader) {
		var OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = OldCookies;
			return api;
		};
	}
}(function () {
	function extend () {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[ i ];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function decode (s) {
		return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
	}

	function init (converter) {
		function api() {}

		function set (key, value, attributes) {
			if (typeof document === 'undefined') {
				return;
			}

			attributes = extend({
				path: '/'
			}, api.defaults, attributes);

			if (typeof attributes.expires === 'number') {
				attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
			}

			// We're using "expires" because "max-age" is not supported by IE
			attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

			try {
				var result = JSON.stringify(value);
				if (/^[\{\[]/.test(result)) {
					value = result;
				}
			} catch (e) {}

			value = converter.write ?
				converter.write(value, key) :
				encodeURIComponent(String(value))
					.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);

			key = encodeURIComponent(String(key))
				.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
				.replace(/[\(\)]/g, escape);

			var stringifiedAttributes = '';
			for (var attributeName in attributes) {
				if (!attributes[attributeName]) {
					continue;
				}
				stringifiedAttributes += '; ' + attributeName;
				if (attributes[attributeName] === true) {
					continue;
				}

				// Considers RFC 6265 section 5.2:
				// ...
				// 3.  If the remaining unparsed-attributes contains a %x3B (";")
				//     character:
				// Consume the characters of the unparsed-attributes up to,
				// not including, the first %x3B (";") character.
				// ...
				stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
			}

			return (document.cookie = key + '=' + value + stringifiedAttributes);
		}

		function get (key, json) {
			if (typeof document === 'undefined') {
				return;
			}

			var jar = {};
			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all.
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var cookie = parts.slice(1).join('=');

				if (!json && cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					var name = decode(parts[0]);
					cookie = (converter.read || converter)(cookie, name) ||
						decode(cookie);

					if (json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					jar[name] = cookie;

					if (key === name) {
						break;
					}
				} catch (e) {}
			}

			return key ? jar[key] : jar;
		}

		api.set = set;
		api.get = function (key) {
			return get(key, false /* read as raw */);
		};
		api.getJSON = function (key) {
			return get(key, true /* read as json */);
		};
		api.remove = function (key, attributes) {
			set(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.defaults = {};

		api.withConverter = init;

		return api;
	}

	return init(function () {});
}));

/*
 * jQuery Easing v1.3 - http://gsgd.co.uk/sandbox/jquery/easing/
 *
 * Uses the built in easing capabilities added In jQuery 1.1
 * to offer multiple easing options
 *
 * TERMS OF USE - jQuery Easing
 *
 * Open source under the BSD License.
 *
 * Copyright Â© 2008 George McGinley Smith
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or other materials
 * provided with the distribution.
 *
 * Neither the name of the author nor the names of contributors may be used to endorse
 * or promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/

// t: current time, b: begInnIng value, c: change In value, d: duration
jQuery.easing['jswing'] = jQuery.easing['swing'];

jQuery.extend( jQuery.easing,
{
	def: 'easeOutQuad',
	swing: function (x, t, b, c, d) {
		//alert(jQuery.easing.default);
		return jQuery.easing[jQuery.easing.def](x, t, b, c, d);
	},
	easeInQuad: function (x, t, b, c, d) {
		return c*(t/=d)*t + b;
	},
	easeOutQuad: function (x, t, b, c, d) {
		return -c *(t/=d)*(t-2) + b;
	},
	easeInOutQuad: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return c/2*t*t + b;
		return -c/2 * ((--t)*(t-2) - 1) + b;
	},
	easeInCubic: function (x, t, b, c, d) {
		return c*(t/=d)*t*t + b;
	},
	easeOutCubic: function (x, t, b, c, d) {
		return c*((t=t/d-1)*t*t + 1) + b;
	},
	easeInOutCubic: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return c/2*t*t*t + b;
		return c/2*((t-=2)*t*t + 2) + b;
	},
	easeInQuart: function (x, t, b, c, d) {
		return c*(t/=d)*t*t*t + b;
	},
	easeOutQuart: function (x, t, b, c, d) {
		return -c * ((t=t/d-1)*t*t*t - 1) + b;
	},
	easeInOutQuart: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return c/2*t*t*t*t + b;
		return -c/2 * ((t-=2)*t*t*t - 2) + b;
	},
	easeInQuint: function (x, t, b, c, d) {
		return c*(t/=d)*t*t*t*t + b;
	},
	easeOutQuint: function (x, t, b, c, d) {
		return c*((t=t/d-1)*t*t*t*t + 1) + b;
	},
	easeInOutQuint: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return c/2*t*t*t*t*t + b;
		return c/2*((t-=2)*t*t*t*t + 2) + b;
	},
	easeInSine: function (x, t, b, c, d) {
		return -c * Math.cos(t/d * (Math.PI/2)) + c + b;
	},
	easeOutSine: function (x, t, b, c, d) {
		return c * Math.sin(t/d * (Math.PI/2)) + b;
	},
	easeInOutSine: function (x, t, b, c, d) {
		return -c/2 * (Math.cos(Math.PI*t/d) - 1) + b;
	},
	easeInExpo: function (x, t, b, c, d) {
		return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;
	},
	easeOutExpo: function (x, t, b, c, d) {
		return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
	},
	easeInOutExpo: function (x, t, b, c, d) {
		if (t==0) return b;
		if (t==d) return b+c;
		if ((t/=d/2) < 1) return c/2 * Math.pow(2, 10 * (t - 1)) + b;
		return c/2 * (-Math.pow(2, -10 * --t) + 2) + b;
	},
	easeInCirc: function (x, t, b, c, d) {
		return -c * (Math.sqrt(1 - (t/=d)*t) - 1) + b;
	},
	easeOutCirc: function (x, t, b, c, d) {
		return c * Math.sqrt(1 - (t=t/d-1)*t) + b;
	},
	easeInOutCirc: function (x, t, b, c, d) {
		if ((t/=d/2) < 1) return -c/2 * (Math.sqrt(1 - t*t) - 1) + b;
		return c/2 * (Math.sqrt(1 - (t-=2)*t) + 1) + b;
	},
	easeInElastic: function (x, t, b, c, d) {
		var s=1.70158;var p=0;var a=c;
		if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
		if (a < Math.abs(c)) { a=c; var s=p/4; }
		else var s = p/(2*Math.PI) * Math.asin (c/a);
		return -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
	},
	easeOutElastic: function (x, t, b, c, d) {
		var s=1.70158;var p=0;var a=c;
		if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
		if (a < Math.abs(c)) { a=c; var s=p/4; }
		else var s = p/(2*Math.PI) * Math.asin (c/a);
		return a*Math.pow(2,-10*t) * Math.sin( (t*d-s)*(2*Math.PI)/p ) + c + b;
	},
	easeInOutElastic: function (x, t, b, c, d) {
		var s=1.70158;var p=0;var a=c;
		if (t==0) return b;  if ((t/=d/2)==2) return b+c;  if (!p) p=d*(.3*1.5);
		if (a < Math.abs(c)) { a=c; var s=p/4; }
		else var s = p/(2*Math.PI) * Math.asin (c/a);
		if (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
		return a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )*.5 + c + b;
	},
	easeInBack: function (x, t, b, c, d, s) {
		if (s == undefined) s = 1.70158;
		return c*(t/=d)*t*((s+1)*t - s) + b;
	},
	easeOutBack: function (x, t, b, c, d, s) {
		if (s == undefined) s = 1.70158;
		return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
	},
	easeInOutBack: function (x, t, b, c, d, s) {
		if (s == undefined) s = 1.70158;
		if ((t/=d/2) < 1) return c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b;
		return c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;
	},
	easeInBounce: function (x, t, b, c, d) {
		return c - jQuery.easing.easeOutBounce (x, d-t, 0, c, d) + b;
	},
	easeOutBounce: function (x, t, b, c, d) {
		if ((t/=d) < (1/2.75)) {
			return c*(7.5625*t*t) + b;
		} else if (t < (2/2.75)) {
			return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;
		} else if (t < (2.5/2.75)) {
			return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;
		} else {
			return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;
		}
	},
	easeInOutBounce: function (x, t, b, c, d) {
		if (t < d/2) return jQuery.easing.easeInBounce (x, t*2, 0, c, d) * .5 + b;
		return jQuery.easing.easeOutBounce (x, t*2-d, 0, c, d) * .5 + c*.5 + b;
	}
});

/*!
 * hoverIntent v1.10.0 // 2019.02.25 // jQuery v1.7.0+
 * http://briancherne.github.io/jquery-hoverIntent/
 *
 * You may use hoverIntent under the terms of the MIT license. Basically that
 * means you are free to use hoverIntent as long as this header is left intact.
 * Copyright 2007-2019 Brian Cherne
 */

/**
 * hoverIntent is similar to jQuery's built-in "hover" method except that
 * instead of firing the handlerIn function immediately, hoverIntent checks
 * to see if the user's mouse has slowed down (beneath the sensitivity
 * threshold) before firing the event. The handlerOut function is only
 * called after a matching handlerIn.
 *
 * // basic usage ... just like .hover()
 * .hoverIntent( handlerIn, handlerOut )
 * .hoverIntent( handlerInOut )
 *
 * // basic usage ... with event delegation!
 * .hoverIntent( handlerIn, handlerOut, selector )
 * .hoverIntent( handlerInOut, selector )
 *
 * // using a basic configuration object
 * .hoverIntent( config )
 *
 * @param  handlerIn   function OR configuration object
 * @param  handlerOut  function OR selector for delegation OR undefined
 * @param  selector    selector OR undefined
 * @author Brian Cherne <brian(at)cherne(dot)net>
 */

;(function(factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        define(['jquery'], factory);
    } else if (typeof module === 'object' && module.exports) {
        module.exports = factory(require('jquery'));
    } else if (jQuery && !jQuery.fn.hoverIntent) {
        factory(jQuery);
    }
})(function($) {
    'use strict';

    // default configuration values
    var _cfg = {
        interval: 100,
        sensitivity: 6,
        timeout: 0
    };

    // counter used to generate an ID for each instance
    var INSTANCE_COUNT = 0;

    // current X and Y position of mouse, updated during mousemove tracking (shared across instances)
    var cX, cY;

    // saves the current pointer position coordinates based on the given mousemove event
    var track = function(ev) {
        cX = ev.pageX;
        cY = ev.pageY;
    };

    // compares current and previous mouse positions
    var compare = function(ev,$el,s,cfg) {
        // compare mouse positions to see if pointer has slowed enough to trigger `over` function
        if ( Math.sqrt( (s.pX-cX)*(s.pX-cX) + (s.pY-cY)*(s.pY-cY) ) < cfg.sensitivity ) {
            $el.off(s.event,track);
            delete s.timeoutId;
            // set hoverIntent state as active for this element (permits `out` handler to trigger)
            s.isActive = true;
            // overwrite old mouseenter event coordinates with most recent pointer position
            ev.pageX = cX; ev.pageY = cY;
            // clear coordinate data from state object
            delete s.pX; delete s.pY;
            return cfg.over.apply($el[0],[ev]);
        } else {
            // set previous coordinates for next comparison
            s.pX = cX; s.pY = cY;
            // use self-calling timeout, guarantees intervals are spaced out properly (avoids JavaScript timer bugs)
            s.timeoutId = setTimeout( function(){compare(ev, $el, s, cfg);} , cfg.interval );
        }
    };

    // triggers given `out` function at configured `timeout` after a mouseleave and clears state
    var delay = function(ev,$el,s,out) {
        var data = $el.data('hoverIntent');
        if (data) {
            delete data[s.id];
        }
        return out.apply($el[0],[ev]);
    };

    $.fn.hoverIntent = function(handlerIn,handlerOut,selector) {
        // instance ID, used as a key to store and retrieve state information on an element
        var instanceId = INSTANCE_COUNT++;

        // extend the default configuration and parse parameters
        var cfg = $.extend({}, _cfg);
        if ( $.isPlainObject(handlerIn) ) {
            cfg = $.extend(cfg, handlerIn);
            if ( !$.isFunction(cfg.out) ) {
                cfg.out = cfg.over;
            }
        } else if ( $.isFunction(handlerOut) ) {
            cfg = $.extend(cfg, { over: handlerIn, out: handlerOut, selector: selector } );
        } else {
            cfg = $.extend(cfg, { over: handlerIn, out: handlerIn, selector: handlerOut } );
        }

        // A private function for handling mouse 'hovering'
        var handleHover = function(e) {
            // cloned event to pass to handlers (copy required for event object to be passed in IE)
            var ev = $.extend({},e);

            // the current target of the mouse event, wrapped in a jQuery object
            var $el = $(this);

            // read hoverIntent data from element (or initialize if not present)
            var hoverIntentData = $el.data('hoverIntent');
            if (!hoverIntentData) { $el.data('hoverIntent', (hoverIntentData = {})); }

            // read per-instance state from element (or initialize if not present)
            var state = hoverIntentData[instanceId];
            if (!state) { hoverIntentData[instanceId] = state = { id: instanceId }; }

            // state properties:
            // id = instance ID, used to clean up data
            // timeoutId = timeout ID, reused for tracking mouse position and delaying "out" handler
            // isActive = plugin state, true after `over` is called just until `out` is called
            // pX, pY = previously-measured pointer coordinates, updated at each polling interval
            // event = string representing the namespaced event used for mouse tracking

            // clear any existing timeout
            if (state.timeoutId) { state.timeoutId = clearTimeout(state.timeoutId); }

            // namespaced event used to register and unregister mousemove tracking
            var mousemove = state.event = 'mousemove.hoverIntent.hoverIntent'+instanceId;

            // handle the event, based on its type
            if (e.type === 'mouseenter') {
                // do nothing if already active
                if (state.isActive) { return; }
                // set "previous" X and Y position based on initial entry point
                state.pX = ev.pageX; state.pY = ev.pageY;
                // update "current" X and Y position based on mousemove
                $el.off(mousemove,track).on(mousemove,track);
                // start polling interval (self-calling timeout) to compare mouse coordinates over time
                state.timeoutId = setTimeout( function(){compare(ev,$el,state,cfg);} , cfg.interval );
            } else { // "mouseleave"
                // do nothing if not already active
                if (!state.isActive) { return; }
                // unbind expensive mousemove event
                $el.off(mousemove,track);
                // if hoverIntent state is true, then call the mouseOut function after the specified delay
                state.timeoutId = setTimeout( function(){delay(ev,$el,state,cfg.out);} , cfg.timeout );
            }
        };

        // listen for mouseenter and mouseleave
        return this.on({'mouseenter.hoverIntent':handleHover,'mouseleave.hoverIntent':handleHover}, cfg.selector);
    };
});

/*
* jQuery Simply Countable plugin
* Provides a character counter for any text input or textarea
*
* @version  0.4.2
* @homepage http://github.com/aaronrussell/jquery-simply-countable/
* @author   Aaron Russell (http://www.aaronrussell.co.uk)
*
* Copyright (c) 2009-2010 Aaron Russell (aaron@gc4.co.uk)
* Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
* and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
*/

;(function($){

  $.fn.simplyCountable = function(options){

    options = $.extend({
      counter:            '#counter',
      countType:          'characters',
      maxCount:           140,
      strictMax:          false,
      countDirection:     'down',
      safeClass:          'safe',
      overClass:          'over',
      thousandSeparator:  ',',
      onOverCount:        function(){},
      onSafeCount:        function(){},
      onMaxCount:         function(){}
    }, options);

    var navKeys = [33,34,35,36,37,38,39,40];

    return $(this).each(function(){

      var countable = $(this);
      var counter = $(options.counter);
      if (!counter.length) { return false; }

      var countCheck = function(){

        var count;
        var revCount;

        var reverseCount = function(ct){
          return ct - (ct*2) + options.maxCount;
        }

        var countInt = function(){
          return (options.countDirection === 'up') ? revCount : count;
        }

        var numberFormat = function(ct){
          var prefix = '';
          if (options.thousandSeparator){
            ct = ct.toString();
            // Handle large negative numbers
            if (ct.match(/^-/)) {
              ct = ct.substr(1);
              prefix = '-';
            }
            for (var i = ct.length-3; i > 0; i -= 3){
              ct = ct.substr(0,i) + options.thousandSeparator + ct.substr(i);
            }
          }
          return prefix + ct;
        }

        var changeCountableValue = function(val){
          countable.val(val).trigger('change');
        }

        /* Calculates count for either words or characters */
        if (options.countType === 'words'){
          count = options.maxCount - $.trim(countable.val()).split(/\s+/).length;
          if (countable.val() === ''){ count += 1; }
        }
        else { count = options.maxCount - countable.val().length; }
        revCount = reverseCount(count);

        /* If strictMax set restrict further characters */
        if (options.strictMax && count <= 0){
          var content = countable.val();
          if (count < 0) {
            options.onMaxCount(countInt(), countable, counter);
          }
          if (options.countType === 'words'){
            var allowedText = content.match( new RegExp('\\s?(\\S+\\s+){'+ options.maxCount +'}') );
            if (allowedText) {
              changeCountableValue(allowedText[0]);
            }
          }
          else { changeCountableValue(content.substring(0, options.maxCount)); }
          count = 0, revCount = options.maxCount;
        }

        counter.text(numberFormat(countInt()));

        /* Set CSS class rules and API callbacks */
        if (!counter.hasClass(options.safeClass) && !counter.hasClass(options.overClass)){
          if (count < 0){ counter.addClass(options.overClass); }
          else { counter.addClass(options.safeClass); }
        }
        else if (count < 0 && counter.hasClass(options.safeClass)){
          counter.removeClass(options.safeClass).addClass(options.overClass);
          options.onOverCount(countInt(), countable, counter);
        }
        else if (count >= 0 && counter.hasClass(options.overClass)){
          counter.removeClass(options.overClass).addClass(options.safeClass);
          options.onSafeCount(countInt(), countable, counter);
        }

      };

      countCheck();

      countable.on('keyup blur paste', function(e) {
        switch(e.type) {
          case 'keyup':
            // Skip navigational key presses
            if ($.inArray(e.which, navKeys) < 0) { countCheck(); }
            break;
          case 'paste':
            // Wait a few miliseconds if a paste event
            setTimeout(countCheck, (e.type === 'paste' ? 5 : 0));
            break;
          default:
            countCheck();
            break;
        }
      });

    });

  };

})(jQuery);

// Test via a getter in the options object to see if the passive property is accessed
var supportsPassive = false;

try {
    var opts = Object.defineProperty({}, 'passive', {
        get: function() {
            supportsPassive = true;
        }
    });
    window.addEventListener("testPassive", null, opts);
    window.removeEventListener("testPassive", null, opts);
} catch (e) {}

/*
Waypoints - 4.0.1
Copyright Â© 2011-2016 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/waypoints/blob/master/licenses.txt
*/
!function(){"use strict";function t(o){if(!o)throw new Error("No options passed to Waypoint constructor");if(!o.element)throw new Error("No element option passed to Waypoint constructor");if(!o.handler)throw new Error("No handler option passed to Waypoint constructor");this.key="waypoint-"+e,this.options=t.Adapter.extend({},t.defaults,o),this.element=this.options.element,this.adapter=new t.Adapter(this.element),this.callback=o.handler,this.axis=this.options.horizontal?"horizontal":"vertical",this.enabled=this.options.enabled,this.triggerPoint=null,this.group=t.Group.findOrCreate({name:this.options.group,axis:this.axis}),this.context=t.Context.findOrCreateByElement(this.options.context),t.offsetAliases[this.options.offset]&&(this.options.offset=t.offsetAliases[this.options.offset]),this.group.add(this),this.context.add(this),i[this.key]=this,e+=1}var e=0,i={};t.prototype.queueTrigger=function(t){this.group.queueTrigger(this,t)},t.prototype.trigger=function(t){this.enabled&&this.callback&&this.callback.apply(this,t)},t.prototype.destroy=function(){this.context.remove(this),this.group.remove(this),delete i[this.key]},t.prototype.disable=function(){return this.enabled=!1,this},t.prototype.enable=function(){return this.context.refresh(),this.enabled=!0,this},t.prototype.next=function(){return this.group.next(this)},t.prototype.previous=function(){return this.group.previous(this)},t.invokeAll=function(t){var e=[];for(var o in i)e.push(i[o]);for(var n=0,r=e.length;r>n;n++)e[n][t]()},t.destroyAll=function(){t.invokeAll("destroy")},t.disableAll=function(){t.invokeAll("disable")},t.enableAll=function(){t.Context.refreshAll();for(var e in i)i[e].enabled=!0;return this},t.refreshAll=function(){t.Context.refreshAll()},t.viewportHeight=function(){return window.innerHeight||document.documentElement.clientHeight},t.viewportWidth=function(){return document.documentElement.clientWidth},t.adapters=[],t.defaults={context:window,continuous:!0,enabled:!0,group:"default",horizontal:!1,offset:0},t.offsetAliases={"bottom-in-view":function(){return this.context.innerHeight()-this.adapter.outerHeight()},"right-in-view":function(){return this.context.innerWidth()-this.adapter.outerWidth()}},window.Waypoint=t}(),function(){"use strict";function t(t){window.setTimeout(t,1e3/60)}function e(t){this.element=t,this.Adapter=n.Adapter,this.adapter=new this.Adapter(t),this.key="waypoint-context-"+i,this.didScroll=!1,this.didResize=!1,this.oldScroll={x:this.adapter.scrollLeft(),y:this.adapter.scrollTop()},this.waypoints={vertical:{},horizontal:{}},t.waypointContextKey=this.key,o[t.waypointContextKey]=this,i+=1,n.windowContext||(n.windowContext=!0,n.windowContext=new e(window)),this.createThrottledScrollHandler(),this.createThrottledResizeHandler()}var i=0,o={},n=window.Waypoint,r=window.onload;e.prototype.add=function(t){var e=t.options.horizontal?"horizontal":"vertical";this.waypoints[e][t.key]=t,this.refresh()},e.prototype.checkEmpty=function(){var t=this.Adapter.isEmptyObject(this.waypoints.horizontal),e=this.Adapter.isEmptyObject(this.waypoints.vertical),i=this.element==this.element.window;t&&e&&!i&&(this.adapter.off(".waypoints"),delete o[this.key])},e.prototype.createThrottledResizeHandler=function(){function t(){e.handleResize(),e.didResize=!1}var e=this;this.adapter.on("resize.waypoints",function(){e.didResize||(e.didResize=!0,n.requestAnimationFrame(t))})},e.prototype.createThrottledScrollHandler=function(){function t(){e.handleScroll(),e.didScroll=!1}var e=this;this.adapter.on("scroll.waypoints",function(){(!e.didScroll||n.isTouch)&&(e.didScroll=!0,n.requestAnimationFrame(t))})},e.prototype.handleResize=function(){n.Context.refreshAll()},e.prototype.handleScroll=function(){var t={},e={horizontal:{newScroll:this.adapter.scrollLeft(),oldScroll:this.oldScroll.x,forward:"right",backward:"left"},vertical:{newScroll:this.adapter.scrollTop(),oldScroll:this.oldScroll.y,forward:"down",backward:"up"}};for(var i in e){var o=e[i],n=o.newScroll>o.oldScroll,r=n?o.forward:o.backward;for(var s in this.waypoints[i]){var a=this.waypoints[i][s];if(null!==a.triggerPoint){var l=o.oldScroll<a.triggerPoint,h=o.newScroll>=a.triggerPoint,p=l&&h,u=!l&&!h;(p||u)&&(a.queueTrigger(r),t[a.group.id]=a.group)}}}for(var c in t)t[c].flushTriggers();this.oldScroll={x:e.horizontal.newScroll,y:e.vertical.newScroll}},e.prototype.innerHeight=function(){return this.element==this.element.window?n.viewportHeight():this.adapter.innerHeight()},e.prototype.remove=function(t){delete this.waypoints[t.axis][t.key],this.checkEmpty()},e.prototype.innerWidth=function(){return this.element==this.element.window?n.viewportWidth():this.adapter.innerWidth()},e.prototype.destroy=function(){var t=[];for(var e in this.waypoints)for(var i in this.waypoints[e])t.push(this.waypoints[e][i]);for(var o=0,n=t.length;n>o;o++)t[o].destroy()},e.prototype.refresh=function(){var t,e=this.element==this.element.window,i=e?void 0:this.adapter.offset(),o={};this.handleScroll(),t={horizontal:{contextOffset:e?0:i.left,contextScroll:e?0:this.oldScroll.x,contextDimension:this.innerWidth(),oldScroll:this.oldScroll.x,forward:"right",backward:"left",offsetProp:"left"},vertical:{contextOffset:e?0:i.top,contextScroll:e?0:this.oldScroll.y,contextDimension:this.innerHeight(),oldScroll:this.oldScroll.y,forward:"down",backward:"up",offsetProp:"top"}};for(var r in t){var s=t[r];for(var a in this.waypoints[r]){var l,h,p,u,c,d=this.waypoints[r][a],f=d.options.offset,w=d.triggerPoint,y=0,g=null==w;d.element!==d.element.window&&(y=d.adapter.offset()[s.offsetProp]),"function"==typeof f?f=f.apply(d):"string"==typeof f&&(f=parseFloat(f),d.options.offset.indexOf("%")>-1&&(f=Math.ceil(s.contextDimension*f/100))),l=s.contextScroll-s.contextOffset,d.triggerPoint=Math.floor(y+l-f),h=w<s.oldScroll,p=d.triggerPoint>=s.oldScroll,u=h&&p,c=!h&&!p,!g&&u?(d.queueTrigger(s.backward),o[d.group.id]=d.group):!g&&c?(d.queueTrigger(s.forward),o[d.group.id]=d.group):g&&s.oldScroll>=d.triggerPoint&&(d.queueTrigger(s.forward),o[d.group.id]=d.group)}}return n.requestAnimationFrame(function(){for(var t in o)o[t].flushTriggers()}),this},e.findOrCreateByElement=function(t){return e.findByElement(t)||new e(t)},e.refreshAll=function(){for(var t in o)o[t].refresh()},e.findByElement=function(t){return o[t.waypointContextKey]},window.onload=function(){r&&r(),e.refreshAll()},n.requestAnimationFrame=function(e){var i=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||t;i.call(window,e)},n.Context=e}(),function(){"use strict";function t(t,e){return t.triggerPoint-e.triggerPoint}function e(t,e){return e.triggerPoint-t.triggerPoint}function i(t){this.name=t.name,this.axis=t.axis,this.id=this.name+"-"+this.axis,this.waypoints=[],this.clearTriggerQueues(),o[this.axis][this.name]=this}var o={vertical:{},horizontal:{}},n=window.Waypoint;i.prototype.add=function(t){this.waypoints.push(t)},i.prototype.clearTriggerQueues=function(){this.triggerQueues={up:[],down:[],left:[],right:[]}},i.prototype.flushTriggers=function(){for(var i in this.triggerQueues){var o=this.triggerQueues[i],n="up"===i||"left"===i;o.sort(n?e:t);for(var r=0,s=o.length;s>r;r+=1){var a=o[r];(a.options.continuous||r===o.length-1)&&a.trigger([i])}}this.clearTriggerQueues()},i.prototype.next=function(e){this.waypoints.sort(t);var i=n.Adapter.inArray(e,this.waypoints),o=i===this.waypoints.length-1;return o?null:this.waypoints[i+1]},i.prototype.previous=function(e){this.waypoints.sort(t);var i=n.Adapter.inArray(e,this.waypoints);return i?this.waypoints[i-1]:null},i.prototype.queueTrigger=function(t,e){this.triggerQueues[e].push(t)},i.prototype.remove=function(t){var e=n.Adapter.inArray(t,this.waypoints);e>-1&&this.waypoints.splice(e,1)},i.prototype.first=function(){return this.waypoints[0]},i.prototype.last=function(){return this.waypoints[this.waypoints.length-1]},i.findOrCreate=function(t){return o[t.axis][t.name]||new i(t)},n.Group=i}(),function(){"use strict";function t(t){this.$element=e(t)}var e=window.jQuery,i=window.Waypoint;e.each(["innerHeight","innerWidth","off","offset","on","outerHeight","outerWidth","scrollLeft","scrollTop"],function(e,i){t.prototype[i]=function(){var t=Array.prototype.slice.call(arguments);return this.$element[i].apply(this.$element,t)}}),e.each(["extend","inArray","isEmptyObject"],function(i,o){t[o]=e[o]}),i.adapters.push({name:"jquery",Adapter:t}),i.Adapter=t}(),function(){"use strict";function t(t){return function(){var i=[],o=arguments[0];return t.isFunction(arguments[0])&&(o=t.extend({},arguments[1]),o.handler=arguments[0]),this.each(function(){var n=t.extend({},o,{element:this});"string"==typeof n.context&&(n.context=t(this).closest(n.context)[0]),i.push(new e(n))}),i}}var e=window.Waypoint;window.jQuery&&(window.jQuery.fn.waypoint=t(window.jQuery)),window.Zepto&&(window.Zepto.fn.waypoint=t(window.Zepto))}();

var config = {};

config.storyActionPositionChange = 1024; // At 1024px the story actions show in the sidebar

config.readSpeed = 200; // 200 words per minute

config.userTypingTimer = 180000; // 180 seconds

/* --------------------------------------------------------------
	Functions
-------------------------------------------------------------- */
/*
 * Lightweight wrapper for console.log
 * Call console.log by using: log(...)
 */
window.log = function() {

	if (!production) {
		log.history = log.history || [];
		log.history.push(arguments);

		if (this.console) {
			console.log(Array.prototype.slice.call(arguments));
		}
	}

};


// Returns a function, that, as long as it continues to be invoked, will not
// be triggered. The function will be called after it stops being called for
// N milliseconds. If `immediate` is passed, trigger the function on the
// leading edge, instead of the trailing.
function debounce(func, wait, immediate) {

	var timeout;

	return function() {
		var context = this, args = arguments;
		var later = function() {
			timeout = null;

			if (!immediate) func.apply(context, args);
		};

		var callNow = immediate && !timeout;

		clearTimeout(timeout);

		timeout = setTimeout(later, wait);

		if (callNow) func.apply(context, args);
	};

}// END debounce


/*
 * Resize variables
 */
function resizeVars() {

	winHeight = win.height();
	winWidth = win.width();

	storyMax = getStoryMax();

}// END resizeVars


/*
 * Resize
 */
function resize() {

	resizeVars();
	setProgressWidth();
	setRelatedSlider();
	showStoryActions();
	storyActionPosition();

    // Hide mobile nav on resize
    if (winWidth >= 768 && body.hasClass('nav-open')) {
	    $('html, body').removeClass('nav-open');
	}

}// END resize


/*
 * Scroll handler
 */
function scrollHandler() {

    storyStickyHdr();

}// END scrollHandler


/*
 * Scroll to top
 *
 * @param position [int] - the int position the window should scroll to
 */
function scrollTo(position) {

	$('html, body').animate({
		scrollTop: position
	}, 250);

}// END scrollToTop


/*
 * Get window scroll position
 */
function getWinScrollTop() {

    return win.scrollTop();

}// END getWinScrollTop


/*
 * Get story scroll position
 */
function getStoryScrollTop() {

    return win.scrollTop() - story.offset().top;

}// END getStoryScrollTop


/*
 * Go back in users browser history
 */
function goBack() {

    window.history.back();

}// END goBack


/**
 * Get URL parameter
 *
 * @param sParam [string] - the param to get the value of
 */
function getUrlParameter(sParam) {

    var sPageURL = decodeURIComponent(window.location.search.substring(1)),
        sURLVariables = sPageURL.split('&'),
        sParameterName,
        i;

    for (i = 0; i < sURLVariables.length; i++) {
        sParameterName = sURLVariables[i].split('=');

        if (sParameterName[0] === sParam) {
            return sParameterName[1] === undefined ? true : sParameterName[1];
        }
    }

}// END getUrlParameter


/**
 * Tracking
 *
 * @param item [string] - GA required - Typically the object that was interacted with (e.g. 'Video')
 * @param event [string] - GA required - The type of interaction (e.g. 'play')
 * @param label [string] - GA optional - Useful for categorising events (e.g. 'Fall Campaign')
 * @param url [string] - The URL
 * @param newtab [boolean] - Does the URL need to open in a new tab
 */
function eventTracking(item, event, label, url, newtab) {

	// Reference the window.open outside the GA stuff - Safari doesn't call this function otherwise.
	if (isSafari && newtab)
		var windowReference = window.open();

    var callback = function () {
        if (typeof(url) != 'undefined') {
            if (newtab) {
                // Added Safari conditional check to pass in Safari workaround for opening tabs
                if (isSafari) {
                    // Reference and pass params to the window.open
                    windowReference.location = url;
                    windowReference.name = '_blank';
                }
                else {
                    window.open(url, '_blank');
                }
            }
            else {
                document.location = url;
            }
        }
   };

	gtag(
        'event',
        item,
        {
    		'event': event,
    		'label': label,
            'destination': url,
            'event_callback': callback
    	}
    );

}// END eventTracking


/**
 * Track link
 *
 * @param el [string] - An <a> tag or an element with data-url=""
 * @param item [string] - required - Typically the object that was interacted with (e.g. 'Video')
 * @param event [string] - required - The type of interaction (e.g. 'play')
 * @param label [string] - Useful for categorising events (e.g. 'Fall Campaign')
 */
function trackLink(el, item, event, label) {

	var url,
		target = false,
		labelData;

	// Test to see if element has href attribute
	if (!el.attr('href') && !el.attr('data-href')) {
		console.log('The element does not contain a href or data-href attribute.');
		console.log('Element: ', el);
	}

	// Get href value
	if (el.attr('href')){
		url = el.attr('href');
	}
	else if (el.attr('data-href')) {
		url = el.attr('data-href');
	}

	// Get target value - if there is one
	if (el.attr('target') == '_blank' || el.attr('data-target') == '_blank')
		target = true;

	// Set label data - If label is not set use the href or data-href value
	if (label)
		labelData = label;
	else if (el.attr('href'))
		labelData = el.attr('href').toLowerCase();
	else if (el.attr('data-href'))
		labelData = el.attr('data-href').toLowerCase();

	// console.log('item = ', item.toLowerCase());
	// console.log('event = ', event);
	// console.log('labelData = ', labelData);

	// Track URL
	eventTracking(item.toLowerCase(), event.toLowerCase(), labelData, url, target);

}// END trackLink


/*
 * Validate email address
 *
 * @param email [string] - The email address to validate
 * @return [boolean] - If the email passed the regex test
 */
function validateEmail(email) {

    var regex = /\S+@\S+\.\S+/;

    return regex.test(email);

}// END validateEmail


/*
 * Show error message
 *
 * @param element [string] - The element to append the error message to
 * @param text [string] - The text to show in the error message
 */
function showErrorMessage(element, text) {

    element.append('<div class="form-element-error-message">' + text + '</div>');

}// END showErrorMessage


/*
 * Get story max height/end point
 */
function getStoryMax() {

    return story.outerHeight() - win.height();

}// END getStoryMax


/*
 * Calculate the percentage of the story based on how far the user scrolled down
 */
function getWidth() {

    // Calculate width in percentage
    winScrollTop = getStoryScrollTop();

    progressWidth = (winScrollTop/storyMax) * 100;
    progressWidth = progressWidth > 100 ? 100 + '%': progressWidth + '%';

    return progressWidth;

}// END getWidth


/*
 * Set progress bar width
 */
function setProgressWidth() {

	if (progressBar.length) {
	    progressBar.css({
	        width: getWidth()
	    });
	}

}// END setProgressWidth


/*
 * Sticky story header
 */
function storyStickyHdr() {

	if (story.length) {
	    if (getWinScrollTop() >= mnHdr.outerHeight()) {
	        if (!storyHdr.hasClass('fixed')) {
	            storyHdr.addClass('fixed');

	            // Add margin to main header
				mnHdr.css({
					marginBottom: storyHdrHeight
				});
	        }
	    }
	    else {
	        if (storyHdr.hasClass('fixed')) {
	            storyHdr.removeClass('fixed');

	            // Remove margin from main header
				mnHdr.css({
					marginBottom: 0
				});
	        }
	    }
	}

}// END storyStickyHdr


/**
 * Search box
 * @param  {[string]} toggle Whether to open or close the search box open|close
 */
function searchBox(toggle) {

    if (toggle == 'open') {
        searchBoxShow = true;

        body.addClass('no-scroll');

        $('.search-box').show();
        $('.search-box input').focus();
    }
    else {
        searchBoxShow = false;

        $('.search-box').hide();
        $('.search-box input').val('');

        body.removeClass('no-scroll');
    }

}// END searchBox


/*
 * Story action scroll - don't go past bottom of story
 */
function storyActionsScroll() {

	if (story.length) {
		var storyActionsStuckClass = 'story-actions--stuck';

		// Test if browser size
		if (winWidth >= config.storyActionPositionChange) {

			// Variables for the calculation of when the story actions hits the bottom of the story
			var storyOffsetBottom = story.offset().top + story.outerHeight();
				storyActionMargin = storyActions.outerHeight(true)*2,
				storyActionScrollHeight = storyOffsetBottom - storyActionMargin;

			// Test if window scroll from top is greater or equal to that of the bottom of the story
			if (getWinScrollTop() >= storyActionScrollHeight) {
				// Test if element has the class, if not apply it and set the position of the element
				if (!storyActions.hasClass(storyActionsStuckClass)) {
					storyActions.addClass(storyActionsStuckClass).css({
						'top': storyActionScrollHeight
					});
				}
			}
			else {
				// Test if the element has the class, if so, remove it and clear styling
				if (storyActions.hasClass(storyActionsStuckClass)) {
					storyActions.removeClass(storyActionsStuckClass).attr('style', '');
				}
			}
		}
		else {
			// Remove class and styling for the element
			storyActions.removeClass(storyActionsStuckClass).attr('style', '');
		}
	}

}// END storyActionsScroll


/*
 * Define the position of the story action depending on the width of the browser window
 */
function storyActionPosition() {

	if (story.length) {
		var bodyClass = 'story-actions--body',
			headerClass = 'story-actions--header';

		// Test if browser size
		if (winWidth >= config.storyActionPositionChange) {
			if (!storyActions.hasClass(bodyClass))
				storyActions.removeClass(headerClass).addClass(bodyClass).detach().appendTo(body);
		}
		else {
			if (!storyActions.hasClass(headerClass))
				storyActions.removeClass(bodyClass).addClass(headerClass).detach().appendTo('.story-hdr .inner');
		}
	}

}// END storyActionPosition


/*
 * Show story actions once user scrolls to start of story
 */
function showStoryActions() {

	var storyStart = $('.story-container h1').offset().top;

	if (getWinScrollTop() >= storyStart) {
		$('.story-actions').addClass('story-actions--show');
	}
	else {
		$('.story-actions').removeClass('story-actions--show');
	}

}// END showStoryActions


/*
 * Story vote action
 */
function voteClick(element) {

	if (!element.hasClass('login-required')) {
		var votedClass = 'story-action-voted',
			actionData = {
				type: element.data('type'),
				id: element.data('id')
			},
			voted = element.hasClass(votedClass),
			action = voted ? 'remove' : 'add',
			url = '/actions/businessLogic/votes/' + action;

		actionData[window.csrfTokenName] = window.csrfTokenValue; // Append CSRF Token

		// Perform AJAX request to update user field
		// Set headers, otherwise it won't work
		$.ajax({
			headers: {
		        'Content-Type':'application/x-www-form-urlencoded'
		    },
			method: 'POST',
			url: url,
			dataType: 'json',
			data: actionData,

			beforeSend: function() {
				// Toggle the voted class after testing the current state of the element
				element.toggleClass(votedClass);
		    }
		})
	    .done(function(data) {
			log('Story ' + action + ' `' + actionData.type + '` action success : ', data);

			if (actionData.type == 'like') {
				var hideClass = 'like-count--hide',
					likeCount = $('.like-count'),
					tally = likeCount.data('tally'),
					newTally = voted ? tally - 1 : tally + 1;

				if (newTally > 0 && likeCount.hasClass(hideClass)) {
					likeCount.removeClass(hideClass);
				}

				if (newTally < 1 && !likeCount.hasClass(hideClass)) {
					likeCount.addClass(hideClass);
				}

				// Only update the value if it is under 1000, else just change the data tag
				// Any value over 999 will have number prefixing, we don't want to override that
				if (newTally <= 999) {
					likeCount.text(newTally).data('tally', newTally);
				}
				else {
					likeCount.data('tally', newTally);
				}
			}
			else if (actionData.type == 'bookmark') {
				if (voted) {
					// Remove class
					element.removeClass('icon-bookmarked');
				}
				else {
					// Add class
					element.addClass('icon-bookmarked');
				}
			}
	    })
	    .fail(function(data) {
			console.log('Story ' + action + ' `' + actionData.type + '` action error');
			log(data);

			// Error changing vote - reset button
			element.toggleClass(votedClass);
		});
	}

}// END voteClick


/*
 * Show modal
 *
 * @param [{string}] modal [The modal to open]
 */
function showModal(modal) {

	$('body').addClass('no-scroll');
	$('#' + modal + '-modal').addClass('showee');

}// END showModal


/*
 * Close modal
 */
function closeModal() {

	var modal = $('.modal.showee');

	modal.removeClass('showee');
	$('body').removeClass('no-scroll');

	if (modal.is('#write-instructions-modal')) {
		updateMemberWriteInstructions();
	}

}// END closeModal


/*
 * Setup related slider
 */
function setRelatedSlider() {

    var relatedSliderItems = $('.related-slider-wpr .story-excerpt'),
        relatedSliderItemsLength = relatedSliderItems.length,
        relatedSliderItemsWidth = relatedSliderItems.outerWidth(true),
        relatedSliderWidth = (relatedSliderItemsLength * relatedSliderItemsWidth) + 2; // Add 2 px for Safari fix

    if ($('.related-slider-frm').hasClass('fade-in')) {
        $('.related-slider-frm').removeClass('fade-in');
	}

    $('.related-slider-wpr').css({
        width: relatedSliderWidth
    });

    $('.related-slider-frm').addClass('fade-in');

}// END setRelatedSlider


/*
 * Show error message
 *
 * @param [{string}] error [The error message]
 */
function showErrorMessage(error) {

	return '<div class="message message-small message-error"><p>' + error + '</p></div>';

}// END showErrorMessage


/*
 * Check URL segment
 *
 * @param part [int] - the segment number to check
 * @param text [string] - the text to check against
 */
function checkUrlSegment(part, text) {

	var pathArray = window.location.pathname.split('/'),
		section = pathArray[part],
		check = section == text ? true : false;

	return check;

}// END checkUrlSegment


/*
 * Get text
 * Get the highlight text
 */
function getText() {

	var sel;

	if( window.getSelection ){
		sel = window.getSelection();
	}
	else if( document.getSelection ){
		sel = document.getSelection();
	}
	else if( document.selection ){
		sel = document.selection.createRange();
	}

	//document.selection && document.selection.type != "Control"

	return sel;

}// END getText


/*
 * Get text
 * Get the highlight text
 */
function getSelectionText() {

    var text = '';

    if( window.getSelection ) {
        text = window.getSelection().toString();
    }
    else if( document.selection && document.selection.type != "Control" ) {
        text = document.selection.createRange().text;
    }

    return text;

}// END getSelectionText


/*
 * Tweet length
 */
function tweetLength(tweet_met) {

	var tweet_char = 280, // Tweet character length
		remove_spaces = 5; // Remove the characters or spaces used elsewhere in the URL - in this case the '...' and and quotes

	return tweet_char - remove_spaces - tweet_met.length;

}// END tweetLength


/*
 * Trunchcate tweet
 */
function trunchTweet(string, limit) {

   return string = string.length > limit ? string.substring(0,limit) + "...": string;

}// END trunchTweet


/*
 * Save story
 *
 * @param [{string}] title [The title value of the write story form]
 */
function clearWriteTitle(title) {

	if (title == '')
		writeStoryTitle.removeClass('remove-placeholder');
	else
		writeStoryTitle.addClass('remove-placeholder');

}// END clearWriteTitle


/*
 * Show saved story message
 */
function storySaveMessage(message) {

	var savedClass = '';

	if (message == 'saved') {
		var currentdate = new Date();
		message = 'Last saved : ' + currentdate.getHours() + ':' + currentdate.getMinutes();
	}
	else if (message == 'error'){
		message = 'Error saving';
	}


	if (!$('.save-message').length) {
		$('body').append('<div class="save-message" style="display: none;">' + message +'</div>')
		$('.save-message').fadeIn(200);
	}
	else {
		$('.save-message').text(message);
	}

}// END storySavedMessage


/*
 * Save story
 *
 * @param [{string}] status [The status to save the entry to]
 */
function saveStory(status) {

	var errors = 0;

	// Validate title
	if (writeStoryTitle.text() == '') {
		errors++;
	}
	else {

	}

	// Validate story
	if (writeStoryText.val() == '') {
		errors++;
	}
	else {

	}

	// If status is live, then check to see if all fields are completed
	if (status == 'live'){
		// Categories
		if (!$('.story-cat').is(':checked')) {
			console.log('No categories');
			errors++;
		}
		else {

		}

		// Age rating
		if ($('#write-age-rating').val() == '') {
			console.log('No age rating');
			errors++;
		}
		else {

		}

		// Excerpt
		if ($('#write-story-excerpt').val() == '') {
			console.log('No excerpt');
			errors++;
		}
		else {

		}
	}// END if


	// Check for errors
	if (errors) {
		console.log('Write form errors');
	}
	else {
		submitStory(status);
	}

}// END saveStory


/*
 * Submit story
 *
 * @param [{string}] status [The status to save the entry to]
 */
function submitStory(status) {

	var form = $('#write-form')[0], // You need to use standard javascript object here
		data = new FormData(form);

	if (writeEntryId) {
		data.append('entryId', writeEntryId);
	}

	if (status == 'live') {
		// Set entry as live
		data.append('enabled', '1');
	}
	else {
		// Set entry as draft
		data.append('enabled', '0');
	}

	// Pass entry data to form which is not from native inputs
	data.append('title', writeStoryTitle.text());

	// Test output of form data
	// for (var pair of data.entries()) {
	// 	console.log(pair[0]+ '= '+ pair[1]);
	// }

	// Submit
	$.ajax({
		method: 'POST',
		url: '/',
		data: data,
		// THIS MUST BE DONE FOR FILE UPLOADING
    	contentType: false,
    	processData: false,

		beforeSend: function() {
	        storySaveMessage('Saving...');
	    }
	})
    .done(function(data) {
		log('Write form success : ', data);

		if (data.success === true){
			storySaveMessage('saved');
			writeEntryId = data.id;

			// Update URL - to include username and story title - so if user refreshes page it goes to the correct URL
			//window.history.replaceState('', document.title, window.location.href + '');

			// TODO: if publish via AJAX, update status badge
			if (status == 'live'){
				// Change status badge to live
				if ($('.story-status-badge span').text() != 'Live')
					$('.story-status-badge span').text('Live');

				// Update status variable
				saveStatus = 'live';
			}
			else {
				// Change status to draft
				if ($('.story-status-badge span').text() != 'Draft')
					$('.story-status-badge span').text('Draft');

				// Update status variable
				saveStatus = 'draft';
			}

			if ($('.story-status-badge').hasClass('hidden-el'))
				$('.story-status-badge').removeClass('hidden-el')
		}
		else {
			storySaveMessage('error');
		}
    })
    .fail(function(data) {
		log('Write form error : ', data);
		storySaveMessage('error');
	});

}// END submitStory


/**
 * Delete story
 *
 * @param [{string}] button [The delete button item]
 */
function deleteStory(button) {

	var confirmDelete = confirm('Are you sure you want to delete this story?');

	if (confirmDelete == true) {
		log('Confirmed deletion');

		var entryId = button.data('entry'),
			data = {
	        	entryId: entryId
	    	};

		data[window.csrfTokenName] = window.csrfTokenValue; // Append CSRF Token

	    $.ajax({
	        context: this,
	        type: 'POST',
	        dataType: 'json',
	        data: data,
	        url: '/actions/entries/deleteEntry'
		})
       	.done(function(data){
            log('Delete story success : ', data);

			if (data.success === true){
				button.parent().remove();
			}
        })
	    .fail(function(data) {
			console.log('Delete story error : ', data);
	    });
	}

}// END deleteStory


/*
 * Calculate read time
 */
function calcReadTime(count) {

	var readTime = '',
		readSpeed = config.readSpeed,
		fractionTime = count / readSpeed;

	// Return if less than 1 minute
	if( fractionTime < 1 ) {
		readTime = '< 1 min';
	}
	else {
		// Round fraction up
		var resultTime = Math.ceil(count / readSpeed),
			minTxt = resultTime == 1 ? 'min' : 'mins';

		readTime = resultTime + ' ' + minTxt;
	}

	return readTime;

}// END calcReadTime


/**
 * Update member profile - Write instructions
 */
function updateMemberWriteInstructions() {

	log('Update profile with setting!');

	// Put form data together
	var form = document.getElementById('member-write-instructions-form'),
		formData = new FormData(form);

	$.ajax({
		url: '/',
		type: 'POST',
		dataType: 'JSON',
		data: formData,
		// THIS MUST BE DONE FOR FILE UPLOADING
		processData: false,
		contentType: false
	})
	.done(function(data, status) {
		if (status == 'success' && data.success) {
			log('writeUpdate successful');
		}
		else {
			log('writeUpdate failed');
		}
	})
	.fail(function(data, status) {
		log('writeUpdate error!');
	});

}// END updateMemberWriteInstructions

/* --------------------------------------------------------------
	Variables
-------------------------------------------------------------- */
var winScrollTop,
    win,
    winHeight,
    winWidth,
	body,
    mnHdr,
    keywordForm,
    keywordInput,
    progressBar,
    progressWidth,
    storiesListGrid,
	story,
	storyPara,
    storyMax,
    storyHdr,
    storyHdrHeight,
    storyActions,
    storyActionsSticky,
    storyOffsetBottom,
    writeStory,
    writeForm,
    writeEntryId,
    writeStoryTitle,
    writeStoryText,
    writeSaveMessage,
    searchBoxShow = false,

	// Many browsers include different browser names in their UA.
	// This uses negative look-arounds and it excludes Chrome, Edge,
	// and all Android browsers that include the Safari name in their user agent.
	isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);


/* --------------------------------------------------------------
	Document Ready
-------------------------------------------------------------- */
$(document).ready(function(){

    /*** Variables ***/
    win = $(window);
    body = $('body');

    mnHdr = $('.mn-hdr');
    keywordForm = $('.keyword-search');
    keywordInput = $('.keyword-search input');
    progressBar = $('.progress-bar');
    storiesListGrid = $('.stories-list .stories-grid');
    storyContainer = $('.story-container');
    story = $('.story-content');
    storyHdr = $('.story-hdr');
    storyPara = $('.story-content p');
    storyActions = $('.story-actions');
    writeStory = $('.write-story');
    writeStoryTitle = $('#write-story-title');
    writeForm = $('#write-form');
    writeStoryText = $('.redactor-editor');

    resizeVars();


    /*** Window Scroll ***/
    win.scroll(scrollHandler);

    /*** Window resize ***/
    win.resize(resize);

    // Stop Janky scroll on touch device scrolling
    // https://developers.google.com/web/tools/lighthouse/audits/passive-event-listeners
    function onTouchStart() {}
    // Use our detect's results. passive applied if supported, capture will be false either way.
    document.addEventListener('touchstart', onTouchStart, supportsPassive ? { passive: true } : false);


    // Key up
    $(document).keyup(function(e) {
        if (e.key === "Escape") { // escape key maps to keycode `27`
            if (searchBoxShow) {
                searchBox('close');
            }
        }
    });




    /*** Mobile Navigation ***/
    $('.mobile-nav-btn').click(function(){
        if (body.hasClass('nav-open')) {
	        body.removeClass('nav-open');
		}
	    else {
	        body.addClass('nav-open');
		}
    });

    /*** Main Nav dropdown ***/
    function showNav(){
        $(this).find('.dd-nav').fadeIn(200);
    }
    function hideNav(){
        $(this).find('.dd-nav').fadeOut(200);
    }

    $('.mn-nav .dd').hoverIntent({
        over: showNav,
        out: hideNav
    });

    $('.mn-nav .dd-btn, .mobile-nav .dd-btn').click(function(e){
        e.preventDefault();
    });

    /*** Scroll to top ***/
    $('.scroll-top').click(function(e){
        e.preventDefault();

		scrollTo(0);
	});

	/*** Story share ***/
	function showStoryShare(){
        $(this).find('.story-share-options').fadeIn(200);
    }
    function hideStoryShare(){
        $(this).find('.story-share-options').fadeOut(200);
    }
    $('.story-share').hoverIntent({
        over: showStoryShare,
        out: hideStoryShare,
        timeout: 300
    });

    /*** Maintenance message ***/
    $('.message-maintenance .close-btn').click(function(){
		$('.message-maintenance').remove();

		// Set cookie
		Cookies.set('_maintenance', '1', { expires: 1 });
    });

    /*** Profile dropdown menu ***/
    function showProfileDd(){
        $(this).find('.my-account-dd').fadeIn(200);
    }
    function hideProfileDd(){
        $(this).find('.my-account-dd').fadeOut(200);
    }

    $('.my-account-btn').hoverIntent({
        over: showProfileDd,
        out: hideProfileDd,
        timeout: 300
    });

    // Close modal
    $('.modal-close').on('click', function(){
        closeModal($(this).parent());
    });

    $('.modal-general').on('click', function() {
        closeModal($(this));
    });
    $('.modal-general .modal-content').on('click', function(e){
        e.stopPropagation();
    });

    // Cookie button
    $('.cookie-continue').click(function(e){
        e.preventDefault();

        $('.cookie-frame').remove();
    });

	// Search button
	$('.search-button').click(function(e){
		e.preventDefault();

        searchBox('open');
	});
	$('.search-box__close').click(function(e){
		e.preventDefault();

        searchBox('close');
	});




    // Login button
    $('.login-btn').on('click', function(e){
	    e.preventDefault();

		showModal('login');
    });

    // Not logged in button - Show CTA modal
    $('.login-required').on('click', function(e){
        e.preventDefault();

        showModal('member-cta');
    });

    /*** Tabbed nav ***/
	if (getUrlParameter('tab')) {
		// Scroll to tabbed section
		scrollTo($('.tabbed-section').offset().top);
	}

    $('.tab-nav a').click(function(e) {
        e.preventDefault();

        var sec = $(this).attr('href'),
            nav = $(this).parent(),
            secParent = $(this).parent().parent(),
            secEl = secParent.find('.tab' + sec);

        // Swap active buttons
        nav.find('.active').removeClass('active');
        $(this).addClass('active');

        // Swap active sections
        secParent.find('.tab.active').removeClass('active');
        secEl.addClass('active');

		// Scroll to tabbed section
		scrollTo($('.tabbed-section').offset().top - 50);

        // Test if history is supported
        if (window.history && window.history.replaceState) {
            history.replaceState(null, null, '?tab='+sec.replace('#', ''));
        }
    });

    // Character count for member bio
    $('#member-bio').simplyCountable({
         maxCount: config.memberBioCount
    });


    /*** Excerpt hover ***/
    $('.story-excerpt h2 a').hover(function(){
        $(this).closest('.story-excerpt').addClass('excerpt--hover');
    },
    function(){
        $(this).closest('.story-excerpt').removeClass('excerpt--hover');
    });

    /*** Delete story ***/
    $('.delete-story').click(function(e){
        e.preventDefault();

        deleteStory($(this));
    });

    $('.write-delete-story').click(function(e){
        e.preventDefault();

        var confirmDelete = confirm('Are you sure you want to delete this story?');

    	if (confirmDelete == true) {
    		log('Confirmed deletion');

    		var entryId = $(this).data('entry'),
    			data = {
    	        	entryId: entryId
    	    	};

    	    $.ajax({
    	        context: this,
    	        type: 'POST',
    	        dataType: 'json',
    	        data: data,
    	        url: '/actions/entries/deleteEntry',
    	        success: function(data){
    	            log('Delete story success : ', data);

    				if (data.success === true) {
    					window.location.href = $(this).data('redirect');
    				}
    	        },
    		    error: function(data) {
    				console.log('Delete story error : ', data);
    		    }
    	    });
    	}
    });


    /**
     * Write instructions modal
     * If member has not seen write instructions before then show the modal
     */
    if (typeof showWriteInstructions !== 'undefined') {
        setTimeout(function() {
            showModal('write-instructions');

            $('.write-instructions-got-it').click(function(){
                closeModal();
            });
        }, 500);
    }// END if

    /*** Login form ***/
    $('#login-form').submit(function(e) {
        e.preventDefault();

        $('.message-error').remove();

        $('.login-form-submit').addClass('button-disabled');

        var data = $(this).serialize();

        $.ajax({
            method: 'POST',
            url: '/',
            data: data,
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            beforeSend: function() {
    	        $('.login-form-submit').addClass('button-loader');
    	    },
    	    success: function(data) {
                if (data.success == true){
                    window.location.href = data.returnUrl;
                }

                if (data.error){
                    $('.login-form-submit').before(showErrorMessage(data.error));
                    $('.login-form-submit').removeClass('button-loader button-disabled');
                }
            },
            error: function(data) {
                console.log('error', data);
                $('.login-form-submit').removeClass('button-loader button-disabled');
    	    }
        });
    });


	/*** Story ***/
    if (story.length){

		storyActionPosition();

        storyHdrHeight = storyHdr.outerHeight();


        // Add ID to each element within story
        story.find('p, blockquote').each(function(index) {
            $(this).attr('id', index);
        });

        // Update bookmark
        var waypoints = story.find('p').waypoint(function(direction) {
            // TODO: Save bookmark on users account
            // With ID of element at the top of the screen
            //console.log('p#'+this.element.id);

            //if (direction === 'down') {}
        });






	    /*** Tweet highlighted copy ***/
        // Test for this at the start so the variable can put it in the DOM
        body.append('<a class="tweet-this" href="#0" title=""><i class="icon-twitter"></i> Tweet</a>');

        var storyCopy = storyPara,
            tweetPop = $('.tweet-this'),
            startPosX,
    		startPosY,
    		selection,
    		hightlight = false;

    	storyCopy.on('mousedown', function(e){
    		startPosX = e.pageX;
    		startPosY = e.pageY;
    	});

    	// When text is highlighted in the sotry content
    	storyCopy.on('mouseup', function(e){
            selection = getText().toString(); // Make sure to convert this to a string so we can play around with it

            // Test to see if the highlighted string is empty or not
            if (selection !== ''){

            	hightlight = true;

            	if( e.pageY < startPosY ){
    	        	tweetPop.css({ left: e.pageX, top: e.pageY-65 }).addClass('active');
            	}
            	else {
    	        	tweetPop.css({ left: startPosX, top: startPosY-65 }).addClass('active');
            	}
    		}
    		else {
    	        tweetPop.removeClass('active');
            }
        });

        // Bind event to close tweet button
        body.on('click', function(e){
        	if (hightlight) {
    	    	tweetPop.removeClass('active');
    	    	hightlight = false;
    	    }
        });

        storyCopy.on('click', function(e){
        	e.stopPropagation(); // Remove the click bind
        });

    	// Click event for the tweet button
    	tweetPop.on('click', function(event) {
    		event.stopPropagation(); // Remove the click bind from body on this button

    		var tweet_text = selection,
    			tweet_meta = ' â ' + storyAuthorName,
                storyUrl = encodeURI(window.location),
    			tweet_meta_length = tweetLength(tweet_meta),
    			tweet_url,
    			width  = 575,
    			height = 400,
    			left   = ($(window).width()  - width)  / 2,
    			top    = ($(window).height() - height) / 2,
    			opts   = 'status=1' + ',width=' + width + ',height=' + height + ',top=' + top + ',left=' + left;


    		if (tweet_text.length > tweet_meta_length){
    			tweet_text = trunchTweet(tweet_text, tweet_meta_length);
    		}

    		tweet_text = encodeURI('â' + tweet_text + 'â' + tweet_meta); // Construct full URL and encode it


    		tweet_url = 'http://twitter.com/share?text=' + tweet_text + '&url=' + storyUrl;

    		console.log(tweet_url);

    		setTimeout(function(){
    			window.open(tweet_url, 'twitter', opts);
    		}, 100);

    		return false;
    	});
    }// END if

	// Story votes
	$('.story-like, .story-bookmark').click(function(e){
		e.preventDefault();

		voteClick($(this));
	});


    // Bind an action to the deleteUserPhotoAction click event
    $('#delete-user-image').on('click', function(e) {
        e.preventDefault();

        // Add the value 'zap' to the delete user image input
        $('#delete-user-image-input').val('zap');
    });

    /*** Write story ***/
    if (writeStory.length) {
        clearWriteTitle(writeStoryTitle.text());

        // Remove title placeholder
        writeStoryTitle.on('keydown, keypress', function(e) {
            writeStoryTitle.addClass('remove-placeholder');
        });
        writeStoryTitle.on('keyup', function(e) {
            clearWriteTitle($(this).text());
        });

        // Character count for excerpt
        $('#write-story-excerpt').simplyCountable({
             maxCount: config.storyExcerptCount
        });

        // Save write form - will submit with AJAX
        $('.save-story-button').click(function(e) {
    		e.preventDefault();

    		var status = $(this).data('status');
    		saveStory(status);
    	});

        // Keydown on page
        $(document).keydown(function(e) {
            // If Control or Command key is pressed and the S key is pressed
            // run save function. 83 is the key code for S.
            if ((event.ctrlKey || event.metaKey) && event.which == 83) {
                // Save Function
                e.preventDefault();

                // Save story - use global saveStatus variable
                saveStory(saveStatus);
            };
        });

        // Stop form submitting
        writeForm.submit(function(e){
            e.preventDefault();
        });
    }// END if

});


/* --------------------------------------------------------------
	Window Load
-------------------------------------------------------------- */
$(window).on('load', function(e) {

    if (story.length) {
    	// Variables
        storyMax = getStoryMax();

        storyStickyHdr();
        setRelatedSlider();

		// If story actions in sidebar, then use timeout due to font loading and DOM adjusting.
		// Show story actions once the position is correct
		if (winWidth >= config.storyActionPositionChange) {
			setTimeout(function(){
				storyActionsScroll();
				showStoryActions();
			}, 200);
		}

		win.scroll(function(){
			setTimeout(function(){
				storyActionsScroll();
				showStoryActions();
			}, 200);
		});

        if (storyMax > 0) {
            setProgressWidth();

            $(document).on('scroll', function(){
                getWinScrollTop() >= story.offset().top ? setProgressWidth() : progressBar.css({ width: 0 });
            });
        }

        $('.related-slider-frm').on('mouseenter', function() {
            $(this).addClass('hide-grad');
        });
        $('.related-slider-frm').on('mouseleave', function() {
            $(this).removeClass('hide-grad');
        });
    }// END if

});

// Load AJAX library
var ajax = window.superagent;

// Upvote JS object
var upvote = {
	// Cast an upvote
	upvote: function (elementId, key) {
		if (this.devMode) {
			console.log('['+elementId+']'+(key ? ' ['+key+']' : '')+' Upvoting...');
		}
		this._vote(elementId, key, 'upvote');
	},
	// Cast a downvote
	downvote: function (elementId, key) {
		if (this.devMode) {
			console.log('['+elementId+']'+(key ? ' ['+key+']' : '')+' Downvoting...');
		}
		this._vote(elementId, key, 'downvote');
	},
	// Remove vote
	removeVote: function () {
		console.log('Vote removal is disabled.');
	},
	// Cast vote
	_vote: function (elementId, key, vote) {
		// Set vote icons
		var voteIcons = $('.upvote-'+vote+'-'+this._setItemKey(elementId, key));
		var voteMatch = this._determineMatch(voteIcons);
		// Set data
		var data = {
			'id': elementId,
			'key': key
		};
		data[window.csrfTokenName] = window.csrfTokenValue; // Append CSRF Token
		// If matching vote has not been cast
		if (!voteMatch) {

			// TODO: If downvoting is disabled, "opposites" are irrelevant

			// Define opposite
			var opposite;
			switch (vote) {
				case 'upvote': opposite = 'downvote'; break;
				case 'downvote': opposite = 'upvote'; break;
			}
			// Set opposite icons
			var oppositeIcons = $('.upvote-'+opposite+'-'+this._setItemKey(elementId, key));
			var oppositeMatch = this._determineMatch(oppositeIcons);

			// If opposite vote has already been cast
			if (oppositeMatch) {
				// Swap vote
				var action = '/actions/upvote/swap';
			}
			else {
				// Cast new vote
				var action = '/actions/upvote/'+vote;
			}
			// Vote via AJAX
			ajax
				.post(action)
				.send(data)
				.type('form')
				.set('X-Requested-With','XMLHttpRequest')
				.end(function (response) {
					var results = JSON.parse(response.text);
					if (upvote.devMode) {
						console.log('['+elementId+']'+(key ? ' ['+key+']' : '')+' Successfully cast '+vote);
						console.log(results);
					}
					var errorReturned = (typeof results == 'string' || results instanceof String);
					// If no error message was returned
					if (!errorReturned) {
						// If swapping vote
						if (oppositeMatch) {
							results.vote = results.vote * 2;
							upvote._removeMatchClass(oppositeIcons);
						}
						// Update tally & add class
						//upvote._updateTally(elementId, key, results.vote);
						upvote._addMatchClass(voteIcons);

						console.log(results.vote);
					}
				})
			;
		} else {
			// Unvote
			upvote.removeVote(elementId, key);
		}
	},
	// Update tally
	_updateTally: function (elementId, key, vote) {
		var tallies = $('.upvote-tally-'+this._setItemKey(elementId, key));


		for (var i = 0; i < tallies.length; i++) {
			tallies[i].textContent = parseInt(tallies[i].textContent) + parseInt(vote);
		}
	},
	// Generate combined item key
	_setItemKey: function (elementId, key) {
		return elementId+(key ? '-'+key : '');
	},
	// Determine whether matching vote has already been cast
	_determineMatch: function (icons) {
		if (!icons.length) {
			return false;
		} else {
			return ((' '+icons[0].className+' ').indexOf(' upvote-vote-match ') > -1);
		}
	},
	// Add vote match class to icons
	_addMatchClass: function (icons) {
		for (var i = 0; i < icons.length; i++) {
			icons[i].className += ' upvote-vote-match';
		}
	},
	// Remove vote match class from icons
	_removeMatchClass: function (icons) {
		for (var i = 0; i < icons.length; i++) {
			icons[i].className = icons[i].className.replace('upvote-vote-match', '');
		}
	}
}

// This script is only available if "Allow vote removal" is checked

// Extend upvote object to allow vote removal
upvote.removeVote = function (elementId, key) {
	// Set data
	var data = {
		'id': elementId,
		'key': key
	};
	data[window.csrfTokenName] = window.csrfTokenValue; // Append CSRF Token
	// Cast vote
	ajax
		.post('/actions/upvote/remove')
		.send(data)
		.type('form')
		.set('X-Requested-With','XMLHttpRequest')
		.end(function (response) {
			var results = JSON.parse(response.text);
			var errorReturned = (typeof results == 'string' || results instanceof String);
			// If no error message was returned
			if (!errorReturned) {
				upvote._updateTally(elementId, key, results.antivote);
				upvote._removeVoteClass(elementId, key, 'upvote');
				upvote._removeVoteClass(elementId, key, 'downvote');
			}
		})
	;
}

// Extend upvote object to allow vote removal
upvote._removeVoteClass = function (elementId, key, vote) {
	var icons = $('.upvote-'+vote+'-'+this._setItemKey(elementId, key));
	upvote._removeMatchClass(icons);
}
